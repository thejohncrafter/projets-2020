globals: _gnothing;
entry: __start;
struct BST {
    left, value, right
}

fn add(x, t)
    vars: __intermediate_internal13, __intermediate_internal15, __intermediate_internal17, __intermediate_internal12, __intermediate_internal3, __intermediate_internal10, __intermediate_internal5, __intermediate_internal14, __intermediate_internal2, __intermediate_internal7, __intermediate_internal11, __intermediate_internal18, __intermediate_internal1, __intermediate_internal4, __intermediate_internal16, __intermediate_internal6, __intermediate_internal8, __intermediate_internal0, __intermediate_internal9;
{
    __intermediate_internal1 <- t == _gnothing;
    if __intermediate_internal1 {
        __intermediate_internal2 <- alloc BST
        __intermediate_internal0 <- __intermediate_internal2
    } else {
        __intermediate_internal4 <- t[BST.value]
        __intermediate_internal5 <- x < __intermediate_internal4;
        if __intermediate_internal5 {
            __intermediate_internal8 <- t[BST.left]
            __intermediate_internal7 <- call add(x, __intermediate_internal8)

            __intermediate_internal9 <- t[BST.value]
            __intermediate_internal10 <- t[BST.right]
            __intermediate_internal6 <- alloc BST
            __intermediate_internal3 <- __intermediate_internal6
        } else {
            __intermediate_internal12 <- t[BST.value]
            __intermediate_internal13 <- x > __intermediate_internal12;
            if __intermediate_internal13 {
                __intermediate_internal15 <- t[BST.left]
                __intermediate_internal16 <- t[BST.value]
                __intermediate_internal18 <- t[BST.right]
                __intermediate_internal17 <- call add(x, __intermediate_internal18)

                __intermediate_internal14 <- alloc BST
                __intermediate_internal11 <- __intermediate_internal14
            } else {
                __intermediate_internal11 <- t
            }
            __intermediate_internal3 <- __intermediate_internal11
        }
        __intermediate_internal0 <- __intermediate_internal3
    }
    return __intermediate_internal0;
}
fn print_tree(a)
    vars: __intermediate_internal12, __intermediate_internal3, __intermediate_internal10, __intermediate_internal5, __intermediate_internal2, __intermediate_internal7, __intermediate_internal11, __intermediate_internal1, __intermediate_internal4, __intermediate_internal6, __intermediate_internal8, __intermediate_internal0, __intermediate_internal9;
{
    __intermediate_internal0 <- a == _gnothing;
    if __intermediate_internal0 {
        return nothing;
    } else {
    }
    __intermediate_internal1 <- call print("")

    __intermediate_internal2 <- a[BST.left]
    __intermediate_internal3 <- __intermediate_internal2 != _gnothing;
    if __intermediate_internal3 {
        __intermediate_internal4 <- a[BST.left]
        __intermediate_internal5 <- call print_tree(__intermediate_internal4)

    } else {
    }
    __intermediate_internal6 <- a[BST.value]
    __intermediate_internal7 <- call print(__intermediate_internal6)

    __intermediate_internal8 <- a[BST.right]
    __intermediate_internal9 <- __intermediate_internal8 != _gnothing;
    if __intermediate_internal9 {
        __intermediate_internal10 <- a[BST.right]
        __intermediate_internal11 <- call print_tree(__intermediate_internal10)

    } else {
    }
    __intermediate_internal12 <- call print("")

    return __intermediate_internal12;
}
fn mem(x, a)
    vars: __intermediate_internal12, __intermediate_internal3, __intermediate_internal10, __intermediate_internal5, __intermediate_internal2, __intermediate_internal7, __intermediate_internal11, __intermediate_internal1, __intermediate_internal4, __intermediate_internal6, __intermediate_internal8, __intermediate_internal0, __intermediate_internal9;
{
    __intermediate_internal0 <- a[BST.value]
    __intermediate_internal1 <- x == __intermediate_internal0;
    if __intermediate_internal1 {
        return (Bool, 1);
    } else {
    }
    __intermediate_internal2 <- a[BST.value]
    __intermediate_internal3 <- x < __intermediate_internal2;
    __intermediate_internal4 <- a[BST.left]
    __intermediate_internal5 <- __intermediate_internal4 != _gnothing;
    __intermediate_internal6 <- __intermediate_internal3 && __intermediate_internal5;
    if __intermediate_internal6 {
        __intermediate_internal8 <- a[BST.left]
        __intermediate_internal7 <- call mem(x, __intermediate_internal8)

        return __intermediate_internal7;
    } else {
    }
    __intermediate_internal9 <- a[BST.right]
    __intermediate_internal10 <- __intermediate_internal9 != _gnothing;
    if __intermediate_internal10 {
        __intermediate_internal12 <- a[BST.right]
        __intermediate_internal11 <- call mem(x, __intermediate_internal12)

        return __intermediate_internal11;
    } else {
    }
    return (Bool, 0);
}
fn main()
    vars: __intermediate_internal13, __intermediate_internal15, __intermediate_internal17, __intermediate_internal20, __intermediate_internal12, __intermediate_internal3, tree, x, __intermediate_internal5, __intermediate_internal10, __intermediate_internal2, __intermediate_internal14, __intermediate_internal7, __intermediate_internal11, __intermediate_internal19, __intermediate_internal18, __intermediate_internal1, __intermediate_internal4, __intermediate_internal16, __intermediate_internal6, __intermediate_internal8, __intermediate_internal0, __intermediate_internal9;
{
    tree <- _gnothing
    i <- (Int64, 1)
    while __intermediate_internal0 {
        __intermediate_internal1 <- (Int64, 55) * i;
        __intermediate_internal2 <- __intermediate_internal1 % (Int64, 34);
        x <- __intermediate_internal2
        __intermediate_internal3 <- call add(x, tree)

        tree <- __intermediate_internal3
        __intermediate_internal4 <- call print_tree(tree)

        __intermediate_internal5 <- call print("")

        i <- i + (Int64, 1);
        __intermediate_internal0 <- i <= (Int64, 9);
    }
    __intermediate_internal6 <- call mem((Int64, 8), tree)

    __intermediate_internal7 <- call mem((Int64, 0), tree)

    __intermediate_internal8 <- ! __intermediate_internal7;
    __intermediate_internal9 <- __intermediate_internal6 && __intermediate_internal8;
    __intermediate_internal10 <- call mem((Int64, 32), tree)

    __intermediate_internal11 <- __intermediate_internal9 && __intermediate_internal10;
    __intermediate_internal12 <- call mem((Int64, 22), tree)

    __intermediate_internal13 <- ! __intermediate_internal12;
    __intermediate_internal14 <- __intermediate_internal11 && __intermediate_internal13;
    if __intermediate_internal14 {
        __intermediate_internal15 <- call println("")

    } else {
    }
    __intermediate_internal16 <- call add((Int64, 42), tree)

    tree <- __intermediate_internal16
    __intermediate_internal18 <- - (Int64, 1);
    __intermediate_internal17 <- call add(__intermediate_internal18, tree)

    tree <- __intermediate_internal17
    __intermediate_internal19 <- call print_tree(tree)

    __intermediate_internal20 <- call print("")

    return __intermediate_internal20;
}
fn __start()
    vars: __intermediate_internal0;
{
    __intermediate_internal0 <- call main()

}
